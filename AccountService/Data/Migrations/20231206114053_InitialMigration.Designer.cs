// <auto-generated />
using System;
using AccountService.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace AccountService.Data.Migrations
{
    [DbContext(typeof(AccountDbContext))]
    [Migration("20231206114053_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("AccountService.Domain.Account", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastSeen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasMaxLength(20000)
                        .HasColumnType("character varying(20000)");

                    b.Property<int?>("SavingId")
                        .HasColumnType("integer");

                    b.HasKey("Name");

                    b.HasIndex("SavingId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("AccountService.Domain.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<int>("Currency")
                        .HasColumnType("integer");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Period")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Item");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Item");
                });

            modelBuilder.Entity("AccountService.Domain.Saving", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<bool>("Capitalization")
                        .HasColumnType("boolean");

                    b.Property<int>("Currency")
                        .HasColumnType("integer");

                    b.Property<bool>("Deposit")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Interest")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Saving");
                });

            modelBuilder.Entity("AccountService.Data.Models.ExpenseItem", b =>
                {
                    b.HasBaseType("AccountService.Domain.Item");

                    b.HasIndex("AccountName");

                    b.HasDiscriminator().HasValue("ExpenseItem");
                });

            modelBuilder.Entity("AccountService.Data.Models.IncomeItem", b =>
                {
                    b.HasBaseType("AccountService.Domain.Item");

                    b.HasIndex("AccountName");

                    b.HasDiscriminator().HasValue("IncomeItem");
                });

            modelBuilder.Entity("AccountService.Domain.Account", b =>
                {
                    b.HasOne("AccountService.Domain.Saving", "Saving")
                        .WithMany()
                        .HasForeignKey("SavingId");

                    b.Navigation("Saving");
                });

            modelBuilder.Entity("AccountService.Data.Models.ExpenseItem", b =>
                {
                    b.HasOne("AccountService.Domain.Account", "Account")
                        .WithMany("Expenses")
                        .HasForeignKey("AccountName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("AccountService.Data.Models.IncomeItem", b =>
                {
                    b.HasOne("AccountService.Domain.Account", "Account")
                        .WithMany("Incomes")
                        .HasForeignKey("AccountName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("AccountService.Domain.Account", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("Incomes");
                });
#pragma warning restore 612, 618
        }
    }
}
